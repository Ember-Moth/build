{
  "openapi": "3.0.0",
  "info": {
    "title": "API Documentation",
    "version": "1.0.0",
    "description": "API documentation for the project"
  },
  "servers": [
    {
      "url": "/api",
      "description": "API server"
    }
  ],
  "tags": [
    { "name": "Projects",      "description": "Project management operations" },
    { "name": "Workflows",     "description": "Workflow management operations" },
    { "name": "Tasks",         "description": "Task management operations" },
    { "name": "Secrets",       "description": "Secret management operations" },
    { "name": "Authentication","description": "Authentication operations" },
    { "name": "Orders",        "description": "Order management operations" },
    { "name": "Payments",      "description": "Payment operations" }
  ],
  "components": {
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "x-api-key"
      }
    },
    "schemas": {
      "DeployMethod": {
        "type": "object",
        "properties": {
          "type":        { "type": "string",  "description": "Deployment method type" },
          "name":        { "type": "string",  "description": "Deployment method name" },
          "description": { "type": "string",  "description": "Deployment method description" },
          "runs_on":     { "type": "string",  "description": "Where the deployment runs" },
          "branch":      { "type": "string",  "description": "Git branch to deploy" },
          "commands": {
            "type": "array",
            "items": { "type": "string" },
            "description": "Deployment commands"
          },
          "outputs": {
            "type": "array",
            "items": { "type": "string" },
            "description": "Deployment outputs"
          },
          "compress":    { "type": "boolean","description": "Whether to compress the deployment" }
        },
        "required": ["type","name","description","runs_on","branch","commands"]
      },
      "EnvironmentVar": {
        "type": "object",
        "properties": {
          "name":        { "type": "string","description": "Environment variable name" },
          "description": { "type": "string","description": "Environment variable description" }
        },
        "required": ["name","description"]
      },
      "Pricing": {
        "type": "object",
        "properties": {
          "monthly": { "type": "number","description": "Monthly price" },
          "yearly":  { "type": "number","description": "Yearly price" },
          "per_use": { "type": "number","description": "Per use price" }
        }
      },
      "CryptomusConfig": {
        "type": "object",
        "properties": {
          "api_key":     { "type": "string","description": "Cryptomus API key" },
          "merchant_id": { "type": "string","description": "Cryptomus merchant ID" }
        }
      },
      "PaymentConfig": {
        "type": "object",
        "properties": {
          "cryptomus": { "$ref": "#/components/schemas/CryptomusConfig" }
        }
      },
      "Project": {
        "type": "object",
        "properties": {
          "id":          { "type": "integer","description": "Project ID" },
          "name":        { "type": "string","description": "Project name" },
          "description": { "type": "string","description": "Project description" },
          "repo_owner":  { "type": "string","description": "Repository owner" },
          "repo_name":   { "type": "string","description": "Repository name" },
          "preview":     { "type": "string","description": "Preview URL" },
          "workflow_id": { "type": "integer","description": "Associated workflow ID" },
          "deploy_methods": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/DeployMethod" }
          },
          "environment": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/EnvironmentVar" }
          },
          "pricing":        { "$ref": "#/components/schemas/Pricing" },
          "payment_config": { "$ref": "#/components/schemas/PaymentConfig" },
          "created_at":   { "type": "string","description": "Creation timestamp","default":"CURRENT_TIMESTAMP" },
          "updated_at":   { "type": "string","description": "Last update timestamp","default":"CURRENT_TIMESTAMP" }
        }
      },
      "ProjectCreateRequest": {
        "type": "object",
        "properties": {
          "name":         { "type": "string","description":"Project name" },
          "description":  { "type": "string","description":"Project description" },
          "repo_owner":   { "type": "string","description":"Repository owner" },
          "repo_name":    { "type": "string","description":"Repository name" },
          "preview":      { "type": "string","format":"uri","description":"Preview URL" },
          "workflow_id":  { "type": "integer","description":"Associated workflow ID" },
          "deploy_methods": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/DeployMethod" }
          },
          "environment": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/EnvironmentVar" }
          },
          "pricing":       { "$ref": "#/components/schemas/Pricing" },
          "payment_config":{ "$ref": "#/components/schemas/PaymentConfig" }
        },
        "required": ["name","description","repo_owner","repo_name"]
      },
      "ProjectUpdateRequest": {
        "type": "object",
        "properties": {
          "name":         { "type": "string" },
          "description":  { "type": "string" },
          "repo_owner":   { "type": "string" },
          "repo_name":    { "type": "string" },
          "preview":      { "type": "string" },
          "workflow_id":  { "type": "integer" },
          "deploy_methods": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/DeployMethod" }
          },
          "environment": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/EnvironmentVar" }
          },
          "pricing":       { "$ref": "#/components/schemas/Pricing" },
          "payment_config":{ "$ref": "#/components/schemas/PaymentConfig" }
        }
      },
      "Workflow": {
        "type": "object",
        "properties": {
          "id":           { "type": "integer","description":"Workflow ID" },
          "name":         { "type": "string","description":"Workflow name" },
          "description":  { "type": "string","description":"Workflow description" },
          "repo_owner":   { "type": "string","description":"Repository owner" },
          "repo_name":    { "type": "string","description":"Repository name" },
          "workflow_file":{ "type": "string","description":"Workflow file path" },
          "branch":       { "type": "string","description":"Git branch" },
          "github_token": { "type": "string","description":"GitHub token" },
          "created_at":   { "type": "string","description":"Creation timestamp","default":"CURRENT_TIMESTAMP" },
          "updated_at":   { "type": "string","description":"Last update timestamp","default":"CURRENT_TIMESTAMP" }
        },
        "required": ["name","repo_owner","repo_name","workflow_file","branch","github_token"]
      },
      "WorkflowCreateRequest": {
        "type": "object",
        "properties": {
          "name":         { "type": "string","description":"Workflow name" },
          "description":  { "type": "string","description":"Workflow description" },
          "repo_owner":   { "type": "string","description":"Repository owner" },
          "repo_name":    { "type": "string","description":"Repository name" },
          "workflow_file":{ "type": "string","description":"Workflow file path" },
          "branch":       { "type": "string","description":"Git branch" },
          "github_token": { "type": "string","description":"GitHub token" }
        },
        "required": ["name","repo_owner","repo_name","workflow_file","branch","github_token"]
      },
      "WorkflowUpdateRequest": {
        "type": "object",
        "properties": {
          "name":         { "type": "string" },
          "description":  { "type": "string" },
          "repo_owner":   { "type": "string" },
          "repo_name":    { "type": "string" },
          "workflow_file":{ "type": "string" },
          "branch":       { "type": "string" },
          "github_token": { "type": "string" }
        }
      },
      "Task": {
        "type": "object",
        "properties": {
          "id":           { "type": "integer","description":"Task ID" },
          "project_id":   { "type": "integer","description":"Project ID" },
          "deploy_method":{ "type": "string","description":"Deployment method" },
          "status": {
            "type": "string",
            "enum": ["pending","running","completed","failed"],
            "description": "Task status"
          },
          "result":       { "type": "string","description":"Task result" },
          "created_at":   { "type": "string","description":"Creation timestamp","default":"CURRENT_TIMESTAMP" },
          "updated_at":   { "type": "string","description":"Last update timestamp","default":"CURRENT_TIMESTAMP" }
        }
      },
      "TaskCreateRequest": {
        "type": "object",
        "properties": {
          "project_id":   { "type": "integer","description":"Project ID" },
          "deploy_method":{ "type": "string","description":"Deployment method" },
          "environment": {
            "type": "object",
            "description": "Environment variables",
            "additionalProperties": { "type": "string" }
          },
          "secret":       { "type": "string","description":"API secret for authentication" }
        },
        "required": ["project_id","deploy_method","secret"]
      },
      "Secret": {
        "type": "object",
        "properties": {
          "id":          { "type": "integer","description":"Secret ID" },
          "name":        { "type": "string","description":"Secret name" },
          "description": { "type": "string","description":"Secret description" },
          "project_id":  { "type": "integer","description":"Project ID" },
          "value":       { "type": "string","description":"Secret value" },
          "expires_at":  { "type": "string","description":"Expiration date" },
          "max_calls":   { "type": "integer","description":"Maximum number of calls" },
          "calls":       { "type": "integer","description":"Number of calls made" },
          "created_at":  { "type": "string","description":"Creation timestamp","default":"CURRENT_TIMESTAMP" },
          "updated_at":  { "type": "string","description":"Last update timestamp","default":"CURRENT_TIMESTAMP" }
        }
      },
      "SecretCreateRequest": {
        "type": "object",
        "properties": {
          "name":        { "type": "string","description":"Secret name" },
          "description": { "type": "string","description":"Secret description" },
          "project_id":  { "type": "integer","description":"Project ID" },
          "value":       { "type": "string","description":"Secret value" },
          "expires_at":  { "type": "string","description":"Expiration date" },
          "max_calls":   { "type": "integer","description":"Maximum number of calls" }
        },
        "required": ["name","project_id"]
      },
      "SecretUpdateRequest": {
        "type": "object",
        "properties": {
          "name":        { "type": "string","description":"Secret name" },
          "description": { "type": "string","description":"Secret description" },
          "value":       { "type": "string","description":"Secret value" },
          "expires_at":  { "type": "string","description":"Expiration date" },
          "max_calls":   { "type": "integer","description":"Maximum number of calls" }
        }
      },
      "SecretValidateRequest": {
        "type": "object",
        "properties": {
          "secret":     { "type": "string","description":"Secret key to validate" },
          "project_id": { "type": "integer","description":"Project ID" }
        },
        "required": ["secret","project_id"]
      },
      "SecretValidateResponse": {
        "type": "object",
        "properties": {
          "valid": { "type": "boolean","description":"Whether the secret is valid" }
        }
      },
      "ApiKeyValidationResponse": {
        "type": "object",
        "properties": {
          "authorized": { "type": "boolean","description":"Whether the API key is valid" }
        }
      },
      "Order": {
        "type": "object",
        "properties": {
          "id":            { "type": "string","description":"Order ID" },
          "project_id":    { "type": "integer","description":"Project ID" },
          "project_name":  { "type": "string","description":"Project name" },
          "order_type": {
            "type": "string",
            "enum": ["monthly","per_use","yearly"],
            "description":"Order type"
          },
          "quantity":      { "type": "integer","description":"Quantity" },
          "unit_price":    { "type": "number","description":"Unit price" },
          "total_amount":  { "type": "number","description":"Total amount" },
          "currency":      { "type": "string","description":"Currency" },
          "status":        { "type": "string","description":"Order status" },
          "payment_url":   { "type": "string","description":"Payment URL" },
          "created_at":    { "type": "string","description":"Creation timestamp","default":"CURRENT_TIMESTAMP" },
          "updated_at":    { "type": "string","description":"Last update timestamp","default":"CURRENT_TIMESTAMP" }
        }
      },
      "OrderCreateRequest": {
        "type": "object",
        "properties": {
          "project_id":    { "type": "integer","description":"Project ID" },
          "project_name":  { "type": "string","description":"Project name" },
          "order_type": {
            "type": "string",
            "enum": ["monthly","per_use","yearly"],
            "description":"Order type"
          },
          "quantity":      { "type": "integer","description":"Quantity" },
          "unit_price":    { "type": "number","description":"Unit price" },
          "total_amount":  { "type": "number","description":"Total amount" },
          "currency":      { "type": "string","description":"Currency","default":"USD" },
          "return_url":    { "type": "string","description":"Return URL" },
          "secret":        { "type": "string","description":"Secret key" },
          "payment_config":{ "$ref":"#/components/schemas/PaymentConfig" }
        },
        "required": ["project_id","project_name","order_type","quantity","unit_price","total_amount","payment_config"]
      },
      "PaymentWebhookRequest": {
        "type": "object",
        "properties": {
          "order_id":  { "type": "string","description":"Order ID" },
          "status":    { "type": "string","description":"Payment status" },
          "amount":    { "type": "number","description":"Payment amount" },
          "currency":  { "type": "string","description":"Payment currency" }
        },
        "required": ["order_id","status"]
      }
    }
  },
  "paths": {
    "/project": {
      "get": {
        "tags": ["Projects"],
        "summary": "Get projects",
        "description": "Get list of projects",
        "parameters": [
          { "name": "page", "in": "query", "schema": { "type": "integer","default":1 } },
          { "name": "size", "in": "query", "schema": { "type": "integer","default":10 } },
          { "name": "name", "in": "query", "schema": { "type": "string" } }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code":    { "type": "integer","example":200 },
                    "message": { "type": "string","example":"success" },
                    "data": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/Project" }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Projects"],
        "summary": "Create project",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ProjectCreateRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type":"object",
                  "properties": {
                    "code":    { "type":"integer","example":200 },
                    "message": { "type":"string","example":"success" },
                    "data":    { "$ref":"#/components/schemas/Project" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/project/{id}": {
      "get": {
        "tags": ["Projects"],
        "summary": "Get project by ID",
        "parameters": [
          { "name":"id","in":"path","required":true,"schema":{ "type":"integer" } }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type":"object",
                  "properties":{
                    "code":    { "type":"integer","example":200 },
                    "message": { "type":"string","example":"success" },
                    "data":    { "$ref":"#/components/schemas/Project" }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags":["Projects"],
        "summary":"Update project",
        "parameters":[
          { "name":"id","in":"path","required":true,"schema":{ "type":"integer" } }
        ],
        "requestBody":{
          "required":true,
          "content":{
            "application/json":{
              "schema": { "$ref": "#/components/schemas/ProjectUpdateRequest" }
            }
          }
        },
        "responses":{
          "200":{
            "description":"Successful response",
            "content":{
              "application/json":{
                "schema":{
                  "type":"object",
                  "properties":{
                    "code":    { "type":"integer","example":200 },
                    "message": { "type":"string","example":"success" }
                  }
                }
              }
            }
          }
        }
      },
      "delete":{
        "tags":["Projects"],
        "summary":"Delete project",
        "parameters":[
          { "name":"id","in":"path","required":true,"schema":{ "type":"integer" } }
        ],
        "responses":{
          "200":{
            "description":"Successful response",
            "content":{
              "application/json":{
                "schema":{
                  "type":"object",
                  "properties":{
                    "code":    { "type":"integer","example":200 },
                    "message": { "type":"string","example":"success" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/workflow": {
      "get": {
        "tags": ["Workflows"],
        "summary": "Get workflows",
        "parameters": [
          { "name":"page","in":"query","schema":{"type":"integer","default":1} },
          { "name":"size","in":"query","schema":{"type":"integer","default":10} },
          { "name":"name","in":"query","schema":{"type":"string"} }
        ],
        "responses": {
          "200": {
            "description":"Successful response",
            "content": {
              "application/json": {
                "schema":{
                  "type":"object",
                  "properties":{
                    "code":    { "type":"integer","example":200 },
                    "message": { "type":"string","example":"success" },
                    "data":{
                      "type":"array",
                      "items":{ "$ref":"#/components/schemas/Workflow" }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags":["Workflows"],
        "summary":"Create workflow",
        "requestBody":{
          "required":true,
          "content":{
            "application/json":{
              "schema": { "$ref":"#/components/schemas/WorkflowCreateRequest" }
            }
          }
        },
        "responses":{
          "200":{
            "description":"Successful response",
            "content":{
              "application/json":{
                "schema":{
                  "type":"object",
                  "properties":{
                    "code":    { "type":"integer","example":200 },
                    "message": { "type":"string","example":"success" },
                    "data":    { "$ref":"#/components/schemas/Workflow" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/workflow/{id}": {
      "get": {
        "tags":["Workflows"],
        "summary":"Get workflow by ID",
        "parameters":[
          { "name":"id","in":"path","required":true,"schema":{"type":"integer"} }
        ],
        "responses":{
          "200":{
            "description":"Successful response",
            "content":{
              "application/json":{
                "schema":{
                  "type":"object",
                  "properties":{
                    "code":    { "type":"integer","example":200 },
                    "message": { "type":"string","example":"success" },
                    "data":    { "$ref":"#/components/schemas/Workflow" }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags":["Workflows"],
        "summary":"Update workflow",
        "parameters":[
          { "name":"id","in":"path","required":true,"schema":{"type":"integer"} }
        ],
        "requestBody":{
          "required":true,
          "content":{
            "application/json":{
              "schema": { "$ref":"#/components/schemas/WorkflowUpdateRequest" }
            }
          }
        },
        "responses":{
          "200":{
            "description":"Successful response",
            "content":{
              "application/json":{
                "schema":{
                  "type":"object",
                  "properties":{
                    "code":    { "type":"integer","example":200 },
                    "message": { "type":"string","example":"success" }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags":["Workflows"],
        "summary":"Delete workflow",
        "parameters":[
          { "name":"id","in":"path","required":true,"schema":{"type":"integer"} }
        ],
        "responses":{
          "200":{
            "description":"Successful response",
            "content":{
              "application/json":{
                "schema":{
                  "type":"object",
                  "properties":{
                    "code":    { "type":"integer","example":200 },
                    "message": { "type":"string","example":"success" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/task": {
      "get": {
        "tags":["Tasks"],
        "summary":"Get tasks",
        "parameters":[
          { "name":"project_id","in":"query","schema":{"type":"integer"} },
          { "name":"status","in":"query","schema":{"type":"string","enum":["pending","running","completed","failed"]} }
        ],
        "responses":{
          "200":{
            "description":"Successful response",
            "content":{
              "application/json":{
                "schema":{
                  "type":"object",
                  "properties":{
                    "code":    { "type":"integer","example":200 },
                    "message": { "type":"string","example":"success" },
                    "data":{
                      "type":"array",
                      "items": { "$ref":"#/components/schemas/Task" }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags":["Tasks"],
        "summary":"Create task",
        "requestBody":{
          "required":true,
          "content":{
            "application/json":{
              "schema": { "$ref":"#/components/schemas/TaskCreateRequest" }
            }
          }
        },
        "responses":{
          "200":{
            "description":"Successful response",
            "content":{
              "application/json":{
                "schema":{
                  "type":"object",
                  "properties":{
                    "code":    { "type":"integer","example":200 },
                    "message": { "type":"string","example":"success" },
                    "data":    { "$ref":"#/components/schemas/Task" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/secret": {
      "get": {
        "tags":["Secrets"],
        "summary":"Get secrets",
        "parameters":[
          { "name":"page","in":"query","schema":{"type":"integer","default":1} },
          { "name":"size","in":"query","schema":{"type":"integer","default":10} },
          { "name":"name","in":"query","schema":{"type":"string"} },
          { "name":"project_id","in":"query","schema":{"type":"integer"} }
        ],
        "responses":{
          "200":{
            "description":"Successful response",
            "content":{
              "application/json":{
                "schema":{
                  "type":"object",
                  "properties":{
                    "code":    { "type":"integer","example":200 },
                    "message": { "type":"string","example":"success" },
                    "data":{
                      "type":"array",
                      "items":{ "$ref":"#/components/schemas/Secret" }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags":["Secrets"],
        "summary":"Create secret",
        "requestBody":{
          "required":true,
          "content":{
            "application/json":{
              "schema": { "$ref":"#/components/schemas/SecretCreateRequest" }
            }
          }
        },
        "responses":{
          "200":{
            "description":"Successful response",
            "content":{
              "application/json":{
                "schema":{
                  "type":"object",
                  "properties":{
                    "code":    { "type":"integer","example":200 },
                    "message": { "type":"string","example":"success" },
                    "data":    { "$ref":"#/components/schemas/Secret" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/secret/{id}": {
      "get": {
        "tags":["Secrets"],
        "summary":"Get secret by ID",
        "parameters":[
          { "name":"id","in":"path","required":true,"schema":{"type":"integer"} }
        ],
        "responses":{
          "200":{
            "description":"Successful response",
            "content":{
              "application/json":{
                "schema":{
                  "type":"object",
                  "properties":{
                    "code":    { "type":"integer","example":200 },
                    "message": { "type":"string","example":"success" },
                    "data":    { "$ref":"#/components/schemas/Secret" }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags":["Secrets"],
        "summary":"Update secret",
        "parameters":[
          { "name":"id","in":"path","required":true,"schema":{"type":"integer"} }
        ],
        "requestBody":{
          "required":true,
          "content":{
            "application/json":{
              "schema": { "$ref":"#/components/schemas/SecretUpdateRequest" }
            }
          }
        },
        "responses":{
          "200":{
            "description":"Successful response",
            "content":{
              "application/json":{
                "schema":{
                  "type":"object",
                  "properties":{
                    "code":    { "type":"integer","example":200 },
                    "message": { "type":"string","example":"success" }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags":["Secrets"],
        "summary":"Delete secret",
        "parameters":[
          { "name":"id","in":"path","required":true,"schema":{"type":"integer"} }
        ],
        "responses":{
          "200":{
            "description":"Successful response",
            "content":{
              "application/json":{
                "schema":{
                  "type":"object",
                  "properties":{
                    "code":    { "type":"integer","example":200 },
                    "message": { "type":"string","example":"success" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/secret/validate": {
      "post": {
        "tags":["Secrets"],
        "summary":"Validate secret",
        "requestBody":{
          "required":true,
          "content":{
            "application/json":{
              "schema": { "$ref":"#/components/schemas/SecretValidateRequest" }
            }
          }
        },
        "responses":{
          "200":{
            "description":"Successful response",
            "content":{
              "application/json":{
                "schema":{
                  "type":"object",
                  "properties":{
                    "code":    { "type":"integer","example":200 },
                    "message": { "type":"string","example":"success" },
                    "data":    { "$ref":"#/components/schemas/SecretValidateResponse" }
                  }
                }
              }
            }
          },
          "401":{
            "description":"Invalid secret",
            "content":{
              "application/json":{
                "schema":{
                  "type":"object",
                  "properties":{
                    "code":    { "type":"integer","example":401 },
                    "message": { "type":"string","example":"无效的密钥" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth": {
      "get": {
        "tags":["Authentication"],
        "summary":"Validate API key",
        "responses":{
          "200":{
            "description":"Successful response",
            "content":{
              "application/json":{
                "schema":{
                  "type":"object",
                  "properties":{
                    "code":    { "type":"integer","example":200 },
                    "message": { "type":"string","example":"success" },
                    "data":    { "$ref":"#/components/schemas/ApiKeyValidationResponse" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/order": {
      "post": {
        "tags":["Orders"],
        "summary":"Create order",
        "security": [],
        "requestBody":{
          "required":true,
          "content":{
            "application/json":{
              "schema": { "$ref":"#/components/schemas/OrderCreateRequest" }
            }
          }
        },
        "responses":{
          "200":{
            "description":"Successful response",
            "content":{
              "application/json":{
                "schema":{
                  "type":"object",
                  "properties":{
                    "code":    { "type":"integer","example":200 },
                    "message": { "type":"string","example":"success" },
                    "data":    { "$ref":"#/components/schemas/Order" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/order/{id}": {
      "get": {
        "tags":["Orders"],
        "summary":"Get order by ID",
        "parameters":[
          { "name":"id","in":"path","required":true,"schema":{"type":"string"} }
        ],
        "responses":{
          "200":{
            "description":"Successful response",
            "content":{
              "application/json":{
                "schema":{
                  "type":"object",
                  "properties":{
                    "code":    { "type":"integer","example":200 },
                    "message": { "type":"string","example":"success" },
                    "data":    { "$ref":"#/components/schemas/Order" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/payment/webhook": {
      "post": {
        "tags":["Payments"],
        "summary":"Payment webhook",
        "security": [],
        "requestBody":{
          "required":true,
          "content":{
            "application/json":{
              "schema": { "$ref":"#/components/schemas/PaymentWebhookRequest" }
            }
          }
        },
        "responses":{
          "200":{
            "description":"Successful response",
            "content":{
              "application/json":{
                "schema":{
                  "type":"object",
                  "properties":{
                    "code":    { "type":"integer","example":200 },
                    "message": { "type":"string","example":"success" }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "security": [
    { "ApiKeyAuth": [] }
  ]
}
